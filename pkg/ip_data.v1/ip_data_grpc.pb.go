// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/ip_data/v1/ip_data.proto

package ip_data_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamClient interface {
	Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (EventStream_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (EventStream_UnsubscribeClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (EventStream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[0], "/ip_data.v1.EventStream/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type eventStreamSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventStreamSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStreamClient) Unsubscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (EventStream_UnsubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[1], "/ip_data.v1.EventStream/Unsubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamUnsubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_UnsubscribeClient interface {
	Recv() (*UnsubscribeResponse, error)
	grpc.ClientStream
}

type eventStreamUnsubscribeClient struct {
	grpc.ClientStream
}

func (x *eventStreamUnsubscribeClient) Recv() (*UnsubscribeResponse, error) {
	m := new(UnsubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
// All implementations must embed UnimplementedEventStreamServer
// for forward compatibility
type EventStreamServer interface {
	Subscribe(*Request, EventStream_SubscribeServer) error
	Unsubscribe(*Request, EventStream_UnsubscribeServer) error
	mustEmbedUnimplementedEventStreamServer()
}

// UnimplementedEventStreamServer must be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (UnimplementedEventStreamServer) Subscribe(*Request, EventStream_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventStreamServer) Unsubscribe(*Request, EventStream_UnsubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedEventStreamServer) mustEmbedUnimplementedEventStreamServer() {}

// UnsafeEventStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamServer will
// result in compilation errors.
type UnsafeEventStreamServer interface {
	mustEmbedUnimplementedEventStreamServer()
}

func RegisterEventStreamServer(s grpc.ServiceRegistrar, srv EventStreamServer) {
	s.RegisterService(&EventStream_ServiceDesc, srv)
}

func _EventStream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Subscribe(m, &eventStreamSubscribeServer{stream})
}

type EventStream_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type eventStreamSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventStreamSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStream_Unsubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Unsubscribe(m, &eventStreamUnsubscribeServer{stream})
}

type EventStream_UnsubscribeServer interface {
	Send(*UnsubscribeResponse) error
	grpc.ServerStream
}

type eventStreamUnsubscribeServer struct {
	grpc.ServerStream
}

func (x *eventStreamUnsubscribeServer) Send(m *UnsubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventStream_ServiceDesc is the grpc.ServiceDesc for EventStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ip_data.v1.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventStream_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Unsubscribe",
			Handler:       _EventStream_Unsubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ip_data/v1/ip_data.proto",
}
