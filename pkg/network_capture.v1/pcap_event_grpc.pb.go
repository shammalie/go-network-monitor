// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/network_capture/v1/pcap_event.proto

package network_capture_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkCaptureServiceClient is the client API for NetworkCaptureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkCaptureServiceClient interface {
	// Submit a pcap capture and relay an action for the client.
	NetworkCapture(ctx context.Context, in *NetworkCaptureRequest, opts ...grpc.CallOption) (*NetworkCaptureResponse, error)
}

type networkCaptureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkCaptureServiceClient(cc grpc.ClientConnInterface) NetworkCaptureServiceClient {
	return &networkCaptureServiceClient{cc}
}

func (c *networkCaptureServiceClient) NetworkCapture(ctx context.Context, in *NetworkCaptureRequest, opts ...grpc.CallOption) (*NetworkCaptureResponse, error) {
	out := new(NetworkCaptureResponse)
	err := c.cc.Invoke(ctx, "/network_capture.v1.NetworkCaptureService/NetworkCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkCaptureServiceServer is the server API for NetworkCaptureService service.
// All implementations must embed UnimplementedNetworkCaptureServiceServer
// for forward compatibility
type NetworkCaptureServiceServer interface {
	// Submit a pcap capture and relay an action for the client.
	NetworkCapture(context.Context, *NetworkCaptureRequest) (*NetworkCaptureResponse, error)
	mustEmbedUnimplementedNetworkCaptureServiceServer()
}

// UnimplementedNetworkCaptureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkCaptureServiceServer struct {
}

func (UnimplementedNetworkCaptureServiceServer) NetworkCapture(context.Context, *NetworkCaptureRequest) (*NetworkCaptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkCapture not implemented")
}
func (UnimplementedNetworkCaptureServiceServer) mustEmbedUnimplementedNetworkCaptureServiceServer() {}

// UnsafeNetworkCaptureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkCaptureServiceServer will
// result in compilation errors.
type UnsafeNetworkCaptureServiceServer interface {
	mustEmbedUnimplementedNetworkCaptureServiceServer()
}

func RegisterNetworkCaptureServiceServer(s grpc.ServiceRegistrar, srv NetworkCaptureServiceServer) {
	s.RegisterService(&NetworkCaptureService_ServiceDesc, srv)
}

func _NetworkCaptureService_NetworkCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCaptureServiceServer).NetworkCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network_capture.v1.NetworkCaptureService/NetworkCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCaptureServiceServer).NetworkCapture(ctx, req.(*NetworkCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkCaptureService_ServiceDesc is the grpc.ServiceDesc for NetworkCaptureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkCaptureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network_capture.v1.NetworkCaptureService",
	HandlerType: (*NetworkCaptureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkCapture",
			Handler:    _NetworkCaptureService_NetworkCapture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/network_capture/v1/pcap_event.proto",
}
